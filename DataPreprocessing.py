# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ExSkCuLtHronjeeMLUq6emjB-fhVD2Vg
"""

import nltk
from nltk.corpus import brown, treebank
from collections import defaultdict, Counter
from gensim.models.word2vec import Word2Vec
from multiprocessing import cpu_count
import gensim.downloader as api
import tensorflow as tf
import numpy as np
from tensorflow.keras.utils import to_categorical

nltk.download('brown')
nltk.download('treebank')
nltk.download('punkt')

"""CODIGO DE GUILLERMO"""


def parse_Questions(corpus):
    count = 0
    for sentence in corpus.sents():
        for items in sentence:
            if items == '.' and (items != '?' or '!' or 'if'):
                vocab_v0[count] = sentence
                count = count + 1
    return vocab_v0


def wordEmbedding(vocab):
    # Download dataset
    dataset = [vocab[s] for s in vocab]
    data = [d for d in dataset]

    # Split the data into 2 parts. Part 2 will be used later to update the model
    data_part1 = data[:1000]
    data_part2 = data[1000:]

    # Train Word2Vec model. Defaults result vector size = 100
    model = Word2Vec(data_part1, min_count=0, workers=cpu_count())

    # Save and Load Model
    model.save('newmodel')
    model = Word2Vec.load('newmodel')

    return model


# Method that receives list of tagged sentences and iterates through them to pass them into a dictionary.
# Brown_mapping and tree_mapping equals the map of sentences:tags
def getCorpusTags(brownT, treeT):
    # Set union of tags
    all_tags = set([tag for sentence in treebank.tagged_sents(tagset='universal') for _, tag in sentence]) \
        .union([tag for sentence in brown.tagged_sents(tagset='universal') for _, tag in sentence])

    # Iterate through all the tags to do an int mapping
    c = 0
    for tag in all_tags:
        tag_mapping[tag] = c
        c += 1

    for sent, sent1 in zip(brownT, treeT):
        sentence = []
        sentence1 = []
        tags = []
        tags1 = []
        for word, word1 in zip(sent, sent1):
            sentence.append(word[0])
            sentence1.append(word1[0])
            tags.append(tag_mapping[word[1]])
            tags1.append(tag_mapping[word1[1]])

        brown_mapping[str(sentence)] = str(tags)
        tree_mapping[str(sentence1)] = tags1


# Iterates through the values(sentences), to iterate through the words and save them into xList
# Saves xList in xMatrix, making it a list of lists (transforming the corpus to vectors)
# Checks if the sentence in vocab is the dictionary. Afterwards, it get the value which are
# the respective tags and saves them in yMatrix(labels)
def xySegmentation():
    # Array to save the lists produced on the next for loop
    # xMatrix are the features and yMatrix are the labels
    xMatrix = []
    yMatrix = []
    for i in vocab_v0.values():
        tagged_sentence = []
        xList = []
        hashable_i = str(i)
        if hashable_i in brown_mapping:
            yMatrix.append(brown_mapping[hashable_i])
        elif hashable_i in tree_mapping:
            yMatrix.append(tree_mapping[hashable_i])

        for j in i:
            if j in embedding.wv.vocab:
                xList.append(embedding.wv.get_vector(j))

        xMatrix.append(xList)

    xMatrix = np.array(xMatrix)
    yMatrix = np.array(yMatrix)

    return xMatrix, yMatrix

# Function that takes the labels variables with integers and iterates through  to
# hot encode them and return the transformed data
def labelEncoder(train, test):
    one_hot_train = [[]]
    one_hot_test = [[]]
    c = 0
    for train_list, test_list in zip(train, test):
        one_hot_train.append([to_categorical(train_int) for train_int in train_list if train_int is int ])
        one_hot_test.append([to_categorical(test_int) for test_int in test_list if test_int is int])
        c += 1

    return np.array(one_hot_train), np.array(one_hot_test)


vocab_v0 = dict()
parse_Questions(brown)
parse_Questions(treebank)
embedding = wordEmbedding(vocab_v0)
brownTags = list(brown.tagged_sents(tagset='universal'))
treeTags = list(treebank.tagged_sents(tagset='universal'))
brown_mapping = {}
tree_mapping = {}
tag_mapping = {}
getCorpusTags(brownTags, treeTags)
xTrain, yTrain = xySegmentation()

# Data Partition
x_train = xTrain[int(len(xTrain) * .80):]
x_test = xTrain[:int(len(xTrain) * .20)]
y_train = yTrain[int(len(yTrain) * .80):]
y_test = yTrain[:int(len(xTrain) * .20)]


y_train, y_test = labelEncoder(y_train, y_test)

print(len(y_train))
# Padding Vectorized Data Set
padded_inputs = tf.keras.preprocessing.sequence.pad_sequences(x_train, padding='post')
